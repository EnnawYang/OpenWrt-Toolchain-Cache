#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Coolsnowwolf/Lede Toolchain Cache
on:
  workflow_dispatch:
#  schedule:
#    - cron: 0 18 * * *
#  watch:
#    types: started

env:
  SOURCE_URL: https://github.com/coolsnowwolf/lede
  SOURCE_BRANCH: master
  RELEASE_BRANCH: main
  RELEASE_TAG: toolchain
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        PLATFORM: [bcm27xx/bcm2711, x86/64, ath79/nand, ramips/mt7621]

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install tzdata $(curl -fsSL git.io/depends-ubuntu-2004) rdate
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -fs /usr/share/zoneinfo/$TZ /etc/localtime
          sudo dpkg-reconfigure -f noninteractive tzdata

      - name: Clone Source Code
        id: clone
        run: |
          df -hT $PWD
          git clone $SOURCE_URL -b $SOURCE_BRANCH openwrt
          export SOURCE_USER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
          echo "SOURCE_USER=$SOURCE_USER" >> $GITHUB_ENV
          export SOURCE_NAME="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_NAME=$SOURCE_NAME" >> $GITHUB_ENV
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

      - name: Compare Hash
        id: compare
        run: |
          cd $OPENWRTROOT
          export CURRENT_HASH=$(git log --pretty=tformat:"%h" -n1 tools toolchain)
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
          echo "CURRENT_HASH is $CURRENT_HASH"
          export CACHE_HASH=$(curl -fSsL https://github.com/$GITHUB_REPOSITORY/releases/download/$RELEASE_TAG/cache-hash.txt)
          echo "CACHE_HASH is $CACHE_HASH"
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
            echo "::set-output name=NEED_CACHE::true"
          fi

      - name: Install Feeds
        id: feeds
        if: steps.compare.outputs.NEED_CACHE == 'true'
        run: |
          cd $OPENWRTROOT
          ./scripts/feeds update -a 
          ./scripts/feeds install -a

      - name: Download Packages
        env:
          PLATFORM: ${{ matrix.PLATFORM }}
        id: download
        if: steps.compare.outputs.NEED_CACHE == 'true'
        run: |
          mv config/$PLATFORM.config $OPENWRTROOT/.config
          cat config/extra.config >> $OPENWRTROOT/.config
          cd $OPENWRTROOT
          make defconfig
          make download -j16
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Tools
        id: tools
        if: steps.compare.outputs.NEED_CACHE == 'true' && !cancelled()
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc)

      - name: Compile Toolchain
        id: toolchain
        if: steps.tools.conclusion == 'success' && !cancelled()
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make toolchain/compile -j$(nproc)
          make diffconfig
          cd $OPENWRTROOT/bin/targets/*
          TARGET=$(basename `pwd`)
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          cd *
          SUBTARGET=$(basename `pwd`)
          echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV

      - name: Upload logs
        uses: actions/upload-artifact@v2
        if: steps.tools.conclusion != 'skipped' && !cancelled()
        with:
          name: Logs_${{ env.SOURCE_USER }}_${{ env.SOURCE_NAME }}_${{ env.SOURCE_BRANCH }}_${{ env.TARGET }}_${{ env.SUBTARGET }}
          path: ${{ env.OPENWRTROOT }}/logs

      - name: Organize Files
        id: organize
        if: steps.toolchain.conclusion == 'success' && !cancelled()
        run: |
          cd $OPENWRTROOT
          find -maxdepth 1 -not -name staging_dir -not -name build_dir -not -name .ccache -not -name . | xargs rm -rf {}
          rm -rf build_dir/target*
          rm -rf staging_dir/target*
          cd ..
          mkdir -p output
          tar -Jcvf output/$SOURCE_USER-$SOURCE_NAME-$SOURCE_BRANCH-$TARGET-$SUBTARGET.tar.xz -C openwrt .
          echo $CURRENT_HASH >> output/cache-hash.txt
          df -hT $PWD

      - name: Deploy Files To Release
        id: release
        if: steps.compare.outputs.NEED_CACHE == 'true'
        uses: ncipollo/release-action@v1.8.0
        with:
          name: ${{ env.SOURCE_USER }}-${{ env.SOURCE_NAME }}-${{ env.SOURCE_BRANCH }}-toolchain-cache
          allowUpdates: true
          tag: ${{ env.RELEASE_TAG }}
          commit: ${{ env.RELEASE_BRANCH }}
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: output/*
