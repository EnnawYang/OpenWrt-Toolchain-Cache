#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX, SuLingGG
# Blog: https://p3terx.com
#=================================================

name: Prebuild Tools Toolchain

on:
  repository_dispatch:
  workflow_dispatch:
  #schedule:
  #  - cron: 0 2 * * *

env:
  SOURCE_URL: https://github.com/coolsnowwolf/lede
  SOURCE_BRANCH: master
  RELEASE_BRANCH: main
  RELEASE_TAG: toolchain_loopimg
  TZ: Asia/Shanghai

jobs:
  Build_Tools:
    name: Compile Tools
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

#    - name: Free up space
#      uses: easimon/maximize-build-space@master
#      with:
#        root-reserve-mb: 256
#        swap-size-mb: 1024
#        remove-dotnet: 'true'
#        remove-android: 'true'
#        remove-haskell: 'true'
#        overprovision-lvm: 'true'

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install tzdata $(curl -fsSL git.io/depends-ubuntu-2004) libfuse-dev jq rdate
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E docker image prune -a -f
          sudo ln -fs /usr/share/zoneinfo/$TZ /etc/localtime
          sudo dpkg-reconfigure -f noninteractive tzdata

      - name: Combine Disks
        run: |
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          export ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          export ROOT_LOOP_KB=$(expr $ROOT_FREE_KB - 1048576)
          export ROOT_LOOP_BYTES=$(expr $ROOT_LOOP_KB \* 1024)
          sudo fallocate -l $ROOT_LOOP_BYTES /root.img
          export ROOT_LOOP_DEVNAME=$(sudo losetup -Pf --show /root.img)
          sudo pvcreate -f $ROOT_LOOP_DEVNAME
          export MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          export MNT_LOOP_KB=$(expr $MNT_FREE_KB - 102400)
          export MNT_LOOP_BYTES=$(expr $MNT_LOOP_KB \* 1024)
          sudo fallocate -l $MNT_LOOP_BYTES /mnt/mnt.img
          export MNT_LOOP_DEVNAME=$(sudo losetup -Pf --show /mnt/mnt.img)
          sudo pvcreate -f $MNT_LOOP_DEVNAME
          sudo vgcreate vgstorage $ROOT_LOOP_DEVNAME $MNT_LOOP_DEVNAME
          sudo lvcreate -n lvstorage -l 100%FREE vgstorage
          export LV_DEVNAME=$(sudo lvscan | awk -F "'" '{print $2}')
          sudo mkfs.btrfs -L combinedisk $LV_DEVNAME
          sudo mount -o compress=zstd $LV_DEVNAME $GITHUB_WORKSPACE
          sudo chown -R runner:runner $GITHUB_WORKSPACE
          mkdir -p $GITHUB_WORKSPACE/tmp
          chmod 777 $GITHUB_WORKSPACE/tmp
          sudo cp -rp /tmp/* $GITHUB_WORKSPACE/tmp || true
          sudo mount -B $GITHUB_WORKSPACE/tmp /tmp

      - name: Print Disk Usage Information
        run: |
          sudo btrfs filesystem usage $GITHUB_WORKSPACE

      - name: Generate Variables
        id: env
        run: |
          export SOURCE_USER=$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')
          echo "SOURCE_USER=$SOURCE_USER" >> $GITHUB_ENV
          export SOURCE_NAME=$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')
          echo "SOURCE_NAME=$SOURCE_NAME" >> $GITHUB_ENV
          export TARGET_INFO="$SOURCE_USER-$SOURCE_NAME-$SOURCE_BRANCH"
          echo "TARGET_INFO=$TARGET_INFO" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
          mkdir -p workspace/openwrt
          cd workspace/openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

      - name: Compare Tools Hash
        id: hash
        run: |
          export CURRENT_TOOLS_HASH=$(curl -fsSL \
            https://api.github.com/repos/$SOURCE_USER/$SOURCE_NAME/commits\?sha\=$SOURCE_BRANCH\&path\=tools | jq '.[0] | .sha' | sed 's/"//g')
          echo "CURRENT_TOOLS_HASH=$CURRENT_TOOLS_HASH" >> $GITHUB_ENV
          echo "CURRENT_TOOLS_HASH is $CURRENT_TOOLS_HASH"
          export CACHE_TOOLS_HASH=$(curl -fSsL https://github.com/EnnawYang/OpenWrt-Toolchain-Cache/releases/download/$RELEASE_TAG/cache-tools-hash.txt)
          echo "CACHE_TOOLS_HASH is $CACHE_TOOLS_HASH"
          if [ -z "$CACHE_TOOLS_HASH" ] || [ "$CURRENT_TOOLS_HASH" != "$CACHE_TOOLS_HASH" ]; then
            echo "REBUILD_TOOLS=true" >> $GITHUB_OUTPUT
          fi

      - name: Clone Source Code
        if: steps.hash.outputs.REBUILD_TOOLS == 'true' && !cancelled()
        id: clone
        run: |
          git clone $SOURCE_URL -b $SOURCE_BRANCH $OPENWRTROOT --single-branch

      - name: Install Feeds
        if: steps.clone.conclusion == 'success' && !cancelled()
        id: feeds
        run: |
          cd $OPENWRTROOT
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate Config File
        if: steps.feeds.conclusion == 'success' && !cancelled()
        id: config
        run: |
          cd $OPENWRTROOT
          touch .config
          echo CONFIG_DEVEL=y >> .config
          echo CONFIG_AUTOREMOVE=y >> .config
          echo CONFIG_CCACHE=y >> .config
          echo CONFIG_BUILD_LOG=y >> .config
          echo CONFIG_BUILD_LOG_DIR=\"./logs\" >> .config
          echo CONFIG_ALL=y >> .config
          make defconfig

#      - name: Download Source Packages
#        if: steps.feeds.conclusion == 'success' && !cancelled()
#        id: download
#        run: |
#          cd $OPENWRTROOT
#          make download -j64

      - name: Compile Tools
        if: steps.feeds.conclusion == 'success' && !cancelled()
        id: tools
        run: |
          cd $OPENWRTROOT
          make tools/install -j$(nproc)

      - name: Upload Error Logs
        uses: actions/upload-artifact@v3
        if: steps.tools.conclusion == 'failure' && !cancelled()
        with:
          name: Logs_Tools_${{ env.FILE_DATE }}
          path: ${{ env.OPENWRTROOT }}/logs

      - name: Clean Process
        if: steps.tools.conclusion == 'success' && !cancelled()
        id: clean
        run: |
          cd $OPENWRTROOT
          make clean
          ./scripts/feeds clean
          rm -rf .config* bin dl logs tmp

      - name: Generate Tools Image
        if: steps.clean.conclusion == 'success' && !cancelled()
        id: generate
        run: |
          mkdir -p $GITHUB_WORKSPACE/output
          cd workspace
          mksquashfs openwrt $GITHUB_WORKSPACE/output/${TARGET_INFO}-prebuild-tools.img -force-gid 1001 -force-uid 1001 -comp zstd
          # mkdir -p $GITHUB_WORKSPACE/output
          # split -d -b 1900M ${TARGET_INFO}-prebuild-tools.img $GITHUB_WORKSPACE/output/${TARGET_INFO}-prebuild-tools.img.
          # rm ${TARGET_INFO}-prebuild-tools.img
          cd $OPENWRTROOT
          echo $CURRENT_TOOLS_HASH > $GITHUB_WORKSPACE/output/cache-tools-hash.txt
          ls -lh $GITHUB_WORKSPACE/output

      - name: Upload Prebuild Image To Release
        if: steps.generate.conclusion == 'success' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.TARGET_INFO }}-prebuild-img
          allowUpdates: true
          tag: ${{ env.RELEASE_TAG }}
          commit: ${{ env.RELEASE_BRANCH }}
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: output/*

      - name: Print Disk Usage Information
        if: (!cancelled())
        run: |
          sudo btrfs filesystem usage $GITHUB_WORKSPACE

  Build_Toolchain:
    name: Compile Toolchain ${{ matrix.PLATFORM }}
    needs: [Build_Tools]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        PLATFORM: [bcm27xx/bcm2711, x86/64, ath79/nand, ramips/mt7621]

    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install tzdata $(curl -fsSL git.io/depends-ubuntu-2004) jq rdate
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E docker image prune -a -f
          sudo ln -fs /usr/share/zoneinfo/$TZ /etc/localtime
          sudo dpkg-reconfigure -f noninteractive tzdata

      - name: Check space usage before Compile
        if: (!cancelled())
        run: df -hT

      - name: Checkout
        uses: actions/checkout@main

      - name: Generate Variables
        id: env
        run: |
          export SOURCE_USER=$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')
          echo "SOURCE_USER=$SOURCE_USER" >> $GITHUB_ENV
          export SOURCE_NAME=$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')
          echo "SOURCE_NAME=$SOURCE_NAME" >> $GITHUB_ENV
          export TARGET_INFO="$SOURCE_USER-$SOURCE_NAME-$SOURCE_BRANCH"
          echo "TARGET_INFO=$TARGET_INFO" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Compare Toolchain Hash
        id: hash
        run: |
          export CURRENT_TOOLCHAIN_HASH=$(curl -fsSL \
            https://api.github.com/repos/$SOURCE_USER/$SOURCE_NAME/commits\?sha\=$SOURCE_BRANCH\&path\=toolchain | jq '.[0] | .sha' | sed 's/"//g')
          echo "CURRENT_TOOLCHAIN_HASH=$CURRENT_TOOLCHAIN_HASH" >> $GITHUB_ENV
          echo "CURRENT_TOOLCHAIN_HASH is $CURRENT_TOOLCHAIN_HASH"
          export CACHE_TOOLCHAIN_HASH=$(curl -fSsL https://github.com/EnnawYang/OpenWrt-Toolchain-Cache/releases/download/$RELEASE_TAG/cache-toolchain-hash.txt)
          echo "CACHE_TOOLCHAIN_HASH is $CACHE_TOOLCHAIN_HASH"
          if [ -z "$CACHE_TOOLCHAIN_HASH" ] || [ "$CURRENT_TOOLCHAIN_HASH" != "$CACHE_TOOLCHAIN_HASH" ]; then
            echo "REBUILD_TOOLCHAIN=true" >> $GITHUB_OUTPUT
          fi

      - name: Fetch Tools Image
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true' && !cancelled()
        id: fetch
        run: |
          mkdir -p workspace
          cd workspace
          wget -c -t=3 https://github.com/EnnawYang/OpenWrt-Toolchain-Cache/releases/download/$RELEASE_TAG/${TARGET_INFO}-prebuild-tools.img
          mkdir -p openwrt-ro openwrt workdir overlay
          sudo mount -o loop ${TARGET_INFO}-prebuild-tools.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          sudo chown runner:runner openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

      - name: Install Feeds
        if: steps.fetch.conclusion == 'success' && !cancelled()
        id: feeds
        run: |
          cd $OPENWRTROOT
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate Config File
        env:
          PLATFORM: ${{ matrix.PLATFORM }}
        if: steps.feeds.conclusion == 'success' && !cancelled()
        id: config
        run: |
          mv config/$PLATFORM.config $OPENWRTROOT/.config
          cat config/extra.config >> $OPENWRTROOT/.config
          cd $OPENWRTROOT
          export DEVICE_TARGET="$(grep -v ^\# .config | grep _DEVICE_ | cut -d_ -f3)"
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          export DEVICE_SUBTARGET="$(grep -v ^\# .config | grep _DEVICE_ | cut -d_ -f4)"
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          make defconfig

      - name: Download Source Packages
        if: steps.config.conclusion == 'success' && !cancelled()
        id: download
        run: |
          cd $OPENWRTROOT
          make download -j64

      - name: Compile Toolchain
        if: steps.config.conclusion == 'success' && !cancelled()
        id: toolchain
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make toolchain/install -j$(nproc)
          make target/toolchain/install -j$(nproc)

      - name: Upload Error Logs
        uses: actions/upload-artifact@v3
        if: steps.toolchain.conclusion == 'failure' && !cancelled()
        with:
          name: Logs_Toolchain_${{ env.FILE_DATE }}
          path: ${{ env.OPENWRTROOT }}/logs

      - name: Organize Toolchain Files
        id: organize
        if: steps.toolchain.conclusion == 'success' && !cancelled()
        run: |
          mkdir -p $GITHUB_WORKSPACE/output
          cd $OPENWRTROOT/bin/targets/*/*
          TOOLCHAIN_TAR=$(ls | grep .tar.bz2)
          mv $TOOLCHAIN_TAR $GITHUB_WORKSPACE/output/$TARGET_INFO-$DEVICE_TARGET-$DEVICE_SUBTARGET-toolchain.tar.bz2
          echo $CURRENT_TOOLCHAIN_HASH > $GITHUB_WORKSPACE/output/cache-toolchain-hash.txt
          ls -lh $GITHUB_WORKSPACE/output

      - name: Upload Toolchain To Release
        if: steps.organize.conclusion == 'success' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.TARGET_INFO }}-prebuild-img
          allowUpdates: true
          tag: ${{ env.RELEASE_TAG }}
          commit: ${{ env.RELEASE_BRANCH }}
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: output/*

      - name: Print Disk Usage Information
        if: (!cancelled())
        run: |
          df -hT
